#@ load("@ytt:data", "data")

#@ load("vendor/pipeline-fragments.lib.yml",
#@   "build_edge_image",
#@   "public_docker_registry",
#@   "rust_check_code",
#@   "rust_integration_test",
#@   "repo_resource",
#@   "edge_image_resource",
#@   "version_resource",
#@   "gh_release_resource",
#@   "pipeline_tasks_resource",
#@   "release_task_image_config",
#@   "rust_task_image_config",
#@   "charts_repo_resource",
#@   "charts_repo_bot_branch",
#@   "slack_resource_type",
#@   "slack_resource",
#@   "slack_failure_notification"
#@ )

groups:
- name: sqlx-ledger
  jobs:
    - check-code
    - test-integration
    - release
    - set-dev-version

jobs:
- #@ rust_check_code()
- name: test-integration
  serial: true
  plan:
  - in_parallel:
    - { get: repo, trigger: true }
    - { get: pipeline-tasks }
  - task: test-integration
    timeout: 12m
    tags: ["galoy-staging"]
    config:
      platform: linux
      image_resource: #@ rust_task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
        path: #@ data.values.gh_repository + "-integration"
      caches:
      - path: cargo-home
      - path: cargo-target-dir
      params:
        REPO_PATH: #@ data.values.gh_repository + "-integration"
        DOCKER_HOST_IP: ((staging-ssh.docker_host_ip))
        GOOGLE_CREDENTIALS: ((staging-gcp-creds.creds_json))
        SSH_PRIVATE_KEY: ((staging-ssh.ssh_private_key))
        SSH_PUB_KEY: ((staging-ssh.ssh_public_key))
      run:
        path: pipeline-tasks/ci/tasks/test-integration.sh
  on_failure: #@ slack_failure_notification()

- name: release
  serial: true
  plan:
  - in_parallel:
    - get: repo
      passed:
      - test-integration
      - check-code
    - get: pipeline-tasks
    - get: version
  - task: prep-release
    config:
      platform: linux
      image_resource: #@ release_task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: version
      outputs:
      - name: version
      - name: artifacts
      run:
        path: pipeline-tasks/ci/vendor/tasks/prep-release-src.sh
  - task: update-repo
    config:
      platform: linux
      image_resource: #@ rust_task_image_config()
      inputs:
      - name: artifacts
      - name: pipeline-tasks
      - name: repo
      - name: version
      outputs:
      - name: repo
      run:
        path: pipeline-tasks/ci/tasks/update-repo.sh
  - task: publish-to-crates
    config:
      image_resource: #@ rust_task_image_config()
      platform: linux
      inputs:
      - name: version
      - name: pipeline-tasks
      - name: repo
      params:
        CRATES_API_TOKEN: #@ data.values.crates_api_token
      caches:
      - path: cargo-home
      - path: cargo-target-dir
      run:
        path: pipeline-tasks/ci/tasks/publish-to-crates.sh
  - put: repo
    params:
      tag: artifacts/gh-release-tag
      repository: repo
      merge: true
  - put: version
    params:
      file: version/version
  - put: gh-release
    params:
      name: artifacts/gh-release-name
      tag: artifacts/gh-release-tag
      body: artifacts/gh-release-notes.md

- name: set-dev-version
  plan:
  - in_parallel:
    - { get: repo, passed: [release] }
    - { get: pipeline-tasks }
    - get: version
      trigger: true
      params: { bump: patch }
      passed: [release]
  - task: set-dev-version
    config:
      image_resource: #@ release_task_image_config()
      platform: linux
      inputs:
      - name: version
      - name: repo
      - name: pipeline-tasks
      outputs:
      - name: repo
      run:
        path: pipeline-tasks/ci/tasks/set-dev-version.sh
      params:
        BRANCH: #@ data.values.git_branch
  - put: repo
    params:
      repository: repo
      rebase: true

resources:
- #@ repo_resource()
- #@ pipeline_tasks_resource()
- #@ slack_resource()
- #@ version_resource()
- #@ gh_release_resource()

resource_types:
- #@ slack_resource_type()
